shiny::runApp()
library(igraph)
rm(list=ls())
connec.mat = read.csv(file.choose())	# connections matrix input.txt
head(connec.mat)	# view first few rows
connec.mat = read.csv(file.choose(), header = T)	# connections matrix input.txt
head(connec.mat)	# view first few rows
# making SNA analysis input tables
rm(list=ls())
connec.mat = read.csv(file.choose(), header = T)	# connections matrix input.txt
head(connec.mat)	# view first few rows
names.list1 = as.matrix(connec.mat[,1])	# first col is surveytakers' names
input.mat = connec.mat[, 2:ncol(connec.mat)]	# other cols are survey takers' connections
n = length(names.list1);	n
n
adj.mat = matrix(0, n, n)	# build adjacency matrix of dimn n x n
for (i1 in 1:n){
a1 = match(as.matrix(input.mat[i1,]), names.list1)
for (i2 in 1:length(a1)){
adj.mat[i1, a1[i2]] = length(a1) +1 - i2	} # i2 ends
} # i1 loop ends
rownames(adj.mat) = names.list1
colnames(adj.mat) = names.list1
adj.mat[1:10,1:10]	# view part of adjacency matrix
graph <- graph.adjacency(adj.mat1, mode = "directed",weighted=T)
graph = simplify(graph)
graph <- graph.adjacency(adj.mat1, mode = "directed",weighted=T)
graph <- graph.adjacency(adj.mat, mode = "directed",weighted=T)
graph = simplify(graph)
col.names <- make.names(V(graph)$name, unique = TRUE)
wc = walktrap.community(graph)
jpeg(file = "Network Plot1.jpeg", pointsize = 12,  width = 1850, height = 1650, quality=2000)
par(mai=c(0,0,0,0))   		#this specifies the size of the margins. the default settings leave too much free space on all sides (if no axes are printed)
plot( wc ,
graph,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
#main='Organizational network example',	#specifies the title
#vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=1,			#the font of the name labels
vertex.size = 10,
vertex.label=col.names,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=2			#specifies the size of the font of the labels. can also be made to vary
)
jpeg(file = "Network Plot1.jpeg", pointsize = 12,  width = 1850, height = 1650, quality=2000)
par(mai=c(0,0,0,0))   		#this specifies the size of the margins. the default settings leave too much free space on all sides (if no axes are printed)
plot( wc ,
graph,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
#main='Organizational network example',	#specifies the title
#vertex.label.dist=0.5,			#puts the name labels slightly off the dots
vertex.frame.color='blue', 		#the color of the border of the dots
vertex.label.color='black',		#the color of the name labels
vertex.label.font=1,			#the font of the name labels
vertex.size = 10,
vertex.label=col.names,		#specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=2			#specifies the size of the font of the labels. can also be made to vary
)
dev.off()
getwd()
write.csv(adj.mat,file.choose(), row.names = F)
max(adj.mat)
write.csv(adj.mat,file.choose())
runApp()
runApp()
runApp()
runApp()
library(shiny)
library("shiny")
library("shiny")
runGitHub('network-analysis-shinyapp','aashishkpandey')
library(shiny)
?walktrap.community
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
max_plots = globalenv(20)
runApp()
runApp()
runApp()
wc = walktrap.community(graph())
wc = walktrap.community(graph)
wc$membership
max(wc$membership)
runApp()
runApp()
runApp()
adj.mat
wc
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
i = 1
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
g = graph.adjacency(test, mode=input$mode)
input$mode = 'undirected'
input = list(mode = 'undirected')
input$mode
g = graph.adjacency(test, mode=input$mode)
g = simplify(g)
pct = round(length(wc$names[wc$membership == i])/length(wc$names)*100,2)
E(g)$width = 1
plot(  g ,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
vertex.label.cex=.5			#specifies the size of the font of the labels. can also be made to vary
)
title(paste("Community : ",i), sub = paste("Population share - ",pct,"%"))
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
g = graph.adjacency(test, mode=input$mode)
g = simplify(g)
pct = round(length(wc$names[wc$membership == i])/length(wc$names)*100,2)
E(g)$width = 1
plot(  g ,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
vertex.label.cex=.5			#specifies the size of the font of the labels. can also be made to vary
)
title(paste("Community : ",i), sub = paste("Population share - ",pct,"%"))
i = 2
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
g = graph.adjacency(test, mode=input$mode)
g = simplify(g)
pct = round(length(wc$names[wc$membership == i])/length(wc$names)*100,2)
E(g)$width = 1
plot(  g ,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
vertex.label.cex=.5			#specifies the size of the font of the labels. can also be made to vary
)
title(paste("Community : ",i), sub = paste("Population share - ",pct,"%"))
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
g = graph.adjacency(test, mode=input$mode)
g = simplify(g)
pct = round(length(wc$names[wc$membership == i])/length(wc$names)*100,2)
E(g)$width = 1
windows()
plot(  g ,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
vertex.label.cex=.5			#specifies the size of the font of the labels. can also be made to vary
)
title(paste("Community : ",i), sub = paste("Population share - ",pct,"%"))
i = 1
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
g = graph.adjacency(test, mode=input$mode)
g = simplify(g)
pct = round(length(wc$names[wc$membership == i])/length(wc$names)*100,2)
E(g)$width = 1
windows()
plot(  g ,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
vertex.label.cex=.5			#specifies the size of the font of the labels. can also be made to vary
)
title(paste("Community : ",i), sub = paste("Population share - ",pct,"%"))
runApp()
runApp()
runApp()
runApp()
runApp()
test = adj.mat[match(wc$names[wc$membership == i],rownames(adj.mat)),match(wc$names[wc$membership == i],rownames(adj.mat))]
g = graph.adjacency(test, mode=input$mode)
g = simplify(g)
pct = round(length(wc$names[wc$membership == i])/length(wc$names)*100,2)
E(g)$width = 1
# windows()
plot(  g ,			#the graph to be plotted
layout=layout.fruchterman.reingold,	# the layout method. see the igraph documentation for details
vertex.label.cex=.5			#specifies the size of the font of the labels. can also be made to vary
)
title(paste("Community : ",i), sub = paste("Population share - ",pct,"%"))
runApp()
